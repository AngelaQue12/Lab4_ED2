// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <stdint.h>
#include <pic16f887.h>
#include <xc.h>
#include "I2C.h"
#include "LCD.h"
#include "IOCB.h"
#define _XTAL_FREQ 8000000
int d2b(int to_convert);
int b2d(int to_convert);

#define RTC_SCL_PIN RC3 // Pin para el reloj (SCL)
#define RTC_SDA_PIN RC4 // Pin para los datos (SDA)
#define RTC_ADDRESS 0xD0 // Dirección del RTC en el bus I2C

void setup(void);
void uint8ToString(uint8_t num, char *str);
uint8_t seconds;
uint8_t minutes;
uint8_t horas;
uint8_t year;
uint8_t mes;
uint8_t dia;
char buffer[4];
char buffer2[4];

// Función para leer los segundos desde el RTC
unsigned char Read_RTC_Seconds() {
    I2C_Master_Start(); 
    I2C_Master_Write(RTC_ADDRESS); // Enviar dirección del RTC en modo escritura
    I2C_Master_Write(0x00); // Enviar dirección del registro de segundos
    I2C_Master_RepeatedStart(); 
    I2C_Master_Write(RTC_ADDRESS | 0x01); // Enviar dirección del RTC en modo lectura
    seconds = b2d(I2C_Master_Read(0));
    I2C_Master_Stop(); 

    return seconds;
}

unsigned char Read_RTC_Minutes() {
    I2C_Master_Start(); 
    I2C_Master_Write(RTC_ADDRESS); // Enviar dirección del RTC en modo escritura
    I2C_Master_Write(0x01); // Enviar dirección del registro de minutos
    I2C_Master_RepeatedStart(); 
    I2C_Master_Write(RTC_ADDRESS | 0x01); // Enviar dirección del RTC en modo lectura
    minutes = b2d(I2C_Master_Read(0));
    I2C_Master_Stop(); 

    return minutes;
}

unsigned char Read_RTC_Horas() {
    I2C_Master_Start(); 
    I2C_Master_Write(RTC_ADDRESS); // Enviar dirección del RTC en modo escritura
    I2C_Master_Write(0x02); // Enviar dirección del registro de horas
    I2C_Master_RepeatedStart(); 
    I2C_Master_Write(RTC_ADDRESS | 0x01); // Enviar dirección del RTC en modo lectura
    horas = b2d(I2C_Master_Read(0));
    I2C_Master_Stop(); 

    return horas;
}

unsigned char Read_RTC_Dia() {
    I2C_Master_Start(); 
    I2C_Master_Write(RTC_ADDRESS); // Enviar dirección del RTC en modo escritura
    I2C_Master_Write(0x04); // Enviar dirección del registro de horas
    I2C_Master_RepeatedStart(); 
    I2C_Master_Write(RTC_ADDRESS | 0x01); // Enviar dirección del RTC en modo lectura
    dia = b2d(I2C_Master_Read(0));
    I2C_Master_Stop(); 

    return dia;
}

unsigned char Read_RTC_Mes() {
    I2C_Master_Start(); 
    I2C_Master_Write(RTC_ADDRESS); // Enviar dirección del RTC en modo escritura
    I2C_Master_Write(0x05); // Enviar dirección del registro de horas
    I2C_Master_RepeatedStart(); 
    I2C_Master_Write(RTC_ADDRESS | 0x01); // Enviar dirección del RTC en modo lectura
    mes = b2d(I2C_Master_Read(0));
    I2C_Master_Stop(); 

    return mes;
}

unsigned char Read_RTC_Year() {
    I2C_Master_Start(); 
    I2C_Master_Write(RTC_ADDRESS); // Enviar dirección del RTC en modo escritura
    I2C_Master_Write(0x04); // Enviar dirección del registro de horas
    I2C_Master_RepeatedStart(); 
    I2C_Master_Write(RTC_ADDRESS | 0x01); // Enviar dirección del RTC en modo lectura
    year = b2d(I2C_Master_Read(0));
    I2C_Master_Stop(); 

    return year;
}

void __interrupt() isr (void){  
   
    return;
}

void main(void) {
    setup();
    
    while(1){
        /*
        I2C_Master_Start();
        I2C_Master_Write(0x50);
        I2C_Master_Write(PORTB);
        I2C_Master_Stop();
        __delay_ms(200);
       */
//        I2C_Master_Start();
//        I2C_Master_Write(0x51);
//        PORTD = I2C_Master_Read(0);
//        I2C_Master_Stop();
//        __delay_ms(200);
//        PORTB++;  

        horas = Read_RTC_Horas();
        minutes = Read_RTC_Minutes();
        seconds = Read_RTC_Seconds();
        dia = Read_RTC_Dia();
        mes = Read_RTC_Mes();
        year = Read_RTC_Year();
                     
        if (PORTBbits.RB0==0){ 
            //horas = Read_RTC_Horas();
            horas++;
            if (horas > 23){
                horas = 0;
                
            }
            __delay_ms(100);
        } 
        else if (PORTBbits.RB1 ==0){ 
            horas--;
            if (horas < 0){
                horas = 23;    
            }
            __delay_ms(100);
        }
        if (PORTBbits.RB2 == 0) {
            minutes++;
            if (minutes > 59) {
                minutes = 0;
            }
            __delay_ms(100); 
        } else if (PORTBbits.RB3 == 0) {
            minutes--;
            if (minutes <= 0) {
                minutes = 59;
            }
            __delay_ms(100);
        }
        if (PORTBbits.RB4==0){ 
            mes++;
            if (mes > 12){
                mes = 1;
            }
            __delay_ms(100);
        } 
        else if (PORTBbits.RB5 ==0){ 
             mes--;
            if (mes <= 0){
                mes = 12;
            }
            __delay_ms(100);
        } 
        if (PORTBbits.RB6==0){ 
            dia++;
            if (dia > 31){
                dia = 1;
            }
            __delay_ms(100);
        } 
        else if (PORTBbits.RB7 ==0){ 
             dia--;
             if (dia <= 0){
                dia = 31;
            }
            __delay_ms(100);
        } 

              
        I2C_Master_Start();
        I2C_Master_Write(RTC_ADDRESS);
        I2C_Master_Write(0x02);
        I2C_Master_Write(b2d(horas));
        I2C_Master_Write(b2d(minutes));
        I2C_Master_Write(b2d(mes));
        I2C_Master_Write(b2d(dia));
        I2C_Master_Stop();
        
        
        char hora1 = horas%10;
        char hora2 = horas/10;
        char dia1 = dia%10;
        char dia2 = dia/10;
        char mes1 = mes%10;
        char mes2 = mes/10;
        char year1 = year%10;
        char year2 = year/10;
        uint8ToString(minutes, buffer2);
        uint8ToString(seconds, buffer);
        
        Lcd_Set_Cursor(1,1);
        Lcd_Write_String("Hora:");
        Lcd_Write_Char(' ');
        Lcd_Write_Char(hora2+'0');
        Lcd_Write_Char(hora1+'0');
        Lcd_Write_Char(':');
        Lcd_Write_String(buffer2);
        Lcd_Write_Char(':');
        Lcd_Write_String(buffer);
        
        Lcd_Set_Cursor(2,1);
        Lcd_Write_String("Fecha: ");
        Lcd_Write_Char(year2+'0');
        Lcd_Write_Char(year1+'0');
        Lcd_Write_Char('/');
        Lcd_Write_Char(mes2+'0');
        Lcd_Write_Char(mes1+'0');
        Lcd_Write_Char('/');
        Lcd_Write_Char(dia2+'0');
        Lcd_Write_Char(dia1+'0');
        
        __delay_ms(500); 
    }
    return;
}

void setup(void){
    ANSEL = 0;
    ANSELH = 0;
    TRISB = 0;
    TRISD = 0;
    PORTB = 0;
    PORTD = 0;
    I2C_Master_Init(100000);        // Inicializar Comuncación I2C
    
    ioc_init(0xFF);

    TRISC3 = 1; // Configurar pin de reloj I2C como entrada
    TRISC4 = 1; // Configurar pin de datos I2C como entrada
    
    Lcd_Init();
    Lcd_Clear();
    Lcd_Set_Cursor(1,1);
    Lcd_Write_String("Hora:");
    
    Lcd_Write_Char(':');
        
    Lcd_Write_Char(':');

    Lcd_Set_Cursor(2,1);
    Lcd_Write_String("Fecha");
    
    Lcd_Write_Char('/');
        
    Lcd_Write_Char('/');

    
     // CONFIGURACION DEL OSCILADOR
    OSCCONbits.IRCF2 = 1;
    OSCCONbits.IRCF1 = 1;
    OSCCONbits.IRCF0 = 1; // 8MHZ
    OSCCONbits.SCS = 1;
}

void uint8ToString(uint8_t num, char *str) {
    uint8_t temp = num;
    int8_t i = 0;

    if (temp == 0) {
        str[0] = '0';
        str[1] = '\0';
        return;
    }

    while (temp > 0) {
        str[i++] = '0' + (temp % 10);
        temp /= 10;
    }

    str[i] = '\0';

    int8_t left = 0;
    int8_t right = i - 1;
    while (left < right) {
        char tempChar = str[left];
        str[left] = str[right];
        str[right] = tempChar;
        left++;
        right--;
    }  
}

int  b2d(int to_convert){
   return (to_convert >> 4) * 10 + (to_convert & 0x0F); 
}

int d2b (int to_convert){
    unsigned int bcd=0;
    unsigned int multiplier = 1;
    
    while (to_convert >0){
        unsigned int digit = to_convert % 10;
        bcd += digit * multiplier;
        multiplier *= 16;
        to_convert /= 10;
    }
   return bcd;
}


